- hosts: nginx1, nginx2

  vars_files:
    - "{{ raw }}/raw_docker/var.yml"

  tasks:

  - name: Template a file to nginx-group
    template:
      src: "{{ raw }}/raw_docker/nginx/{{ item }}.j2"
      dest: /home/{{ ansible_user }}/{{ item }}.yml
      owner: "{{ ansible_user }}"
      mode: '0660'
    loop:
      - nginx-full
      - filebeat

  - name: Template a file to local.conf
    template:
      src: "{{ raw }}/raw_docker/nginx/stub_status.j2"
      dest: /home/{{ ansible_user }}/stub_status.conf
      owner: "{{ ansible_user }}"
      mode: '0660'

  - name: Template a file to index.html
    template:
      src: "{{ raw }}/raw_docker/nginx/author.html.j2"
      dest: /home/{{ ansible_user }}/author.html
      owner: "{{ ansible_user }}"
      mode: '0660'

  - name: Template a file to index.html
    template:
      src: "{{ raw }}/raw_docker/nginx/nginx_dockerfile.j2"
      dest: /home/{{ ansible_user }}/Dockerfile
      owner: "{{ ansible_user }}"
      mode: '0660'

  - name: Run
    command: 
      cmd: docker compose -f /home/{{ ansible_user }}/nginx-full.yml up -d
 
  #------------------------------------------------------
  # vars:
  #   node_exporter_version: "1.1.2"
  #   node_exporter_bin: /usr/local/bin/node_exporter
  #   node_exporter_user: node-exporter
  #   node_exporter_group: "{{ node_exporter_user }}"
  #   node_exporter_dir_conf: /etc/node_exporter


  # roles:
  #   - cloudalchemy.node_exporter



#  - name: Run
#    community.docker.docker_compose:
#      project_src: /home/{{ ansible_user }}
#      files:
#        - docker-compose.yml


  # - name: Copy html file
  #   copy: 
  #     src: /home/nw/degree/raw_docker/author.html
  #     dest: /home/{{ ansible_user }}/www/index.html
  #   become: yes

  # - name: create node exporter user
  #   user:
  #     name: "{{ node_exporter_user }}"
  #     append: true
  #     shell: /usr/sbin/nologin
  #     system: true
  #     create_home: false

  # - name: create node exporter config dir
  #   file:
  #     path: "{{ node_exporter_dir_conf }}"  
  #     state: directory
  #     owner: "{{ node_exporter_user }}"
  #     group: "{{ node_exporter_group }}"

  # - name: download and unzip node exporter if not exist
  #   unarchive:
  #     src: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
  #     dest: /tmp/
  #     remote_src: yes
  #     validate_certs: no

  # - name: move the binary to the final destination
  #   copy:
  #     src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
  #     dest: "{{ node_exporter_bin }}"
  #     owner: "{{ node_exporter_user }}"
  #     group: "{{ node_exporter_group }}"
  #     mode: 0755
  #     remote_src: yes

  # - name: clean
  #   file:
  #     path: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/
  #     state: absent

  # - name: install service
  #   template:
  #     src: /home/nw/degree/raw_docker/node_exporter.service.j2
  #     dest: /etc/systemd/system/node_exporter.service
  #     owner: root
  #     group: root
  #     mode: 0755
#    notify: reload_daemon_and_restart_node_exporter

  # - name: service always started
  #   systemd:
  #     name: node_exporter
  #     state: started
  #     enabled: yes

  # handlers:
  # - name: reload_daemon_and_restart_node_exporter
  #   systemd:
  #     name: node_exporter
  #     state: reloaded
  #     daemon_reload: yes
  #     enabled: yes