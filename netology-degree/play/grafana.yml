- hosts: grafana

  vars_files:
    - "{{ raw }}/raw_docker/var.yml"

  tasks:

  - name: Template a file to grafana
    template:
      src: "{{ raw }}/raw_docker/grafana/{{ item }}.j2"
      dest: /home/{{ ansible_user }}/{{ item }}.yml
      owner: "{{ ansible_user }}"
      mode: '0660'
    loop:
      - datasources
      - grafana
      - main

  - name: Run
    command: 
      cmd: docker compose -f /home/{{ ansible_user }}/grafana.yml up -d 

  - name: Copy a file 
    copy:
      src: "{{ raw }}/raw_docker/grafana/{{ item }}.json"
      dest: /home/{{ ansible_user }}/grafana-dashboards/prometheus/{{ item }}.json
      owner: "{{ ansible_user }}"
      mode: '0660'
    loop:
      - nginx
      - node-exporter



  # vars:
  #   agent_binary_location: /usr/local/bin
  #   agent_config_location: /etc/grafana-cloud
  #   linux_architecture: linux-amd64
  #   agent_config_local_path: linux-agent-config.yml
  #   agent_version: 0.31.0

  # tasks:
  #   - name: Download Grafana Agent binary
  #     get_url:
  #       url: "https://github.com/grafana/agent/releases/download/v{{ agent_version }}/agent-{{ linux_architecture }}.zip"
  #       dest: "/tmp/agent-linux.zip"
  #       mode: '0644'

  #   - name: Unarchive Grafana Agent binary
  #     unarchive:
  #       src: "/tmp/agent-linux.zip"
  #       dest: "{{ agent_binary_location }}"
  #       remote_src: yes
  #       mode: '0755'

  #   - name: Create directory for Grafana Agent
  #     file:
  #       path: "{{ agent_config_location }}"
  #       state: directory
  #       mode: '0755'

    # - name: Create config file for Grafana Agent
    #   copy:
    #     src: "{{ agent_config_local_path }}"
    #     dest: "{{ agent_config_location }}/agent-config.yaml"

    # - name: Add user 'grafana-agent'
    #   user:
    #     name: grafana-agent
    #     create_home: no
    #     shell: /bin/false

    # - name: Create service file for Grafana Agent
    #   copy:
    #     dest: "/etc/systemd/system/grafana-agent.service"
    #     content: |
    #       [Unit]
    #       Description=Grafana Agent

    #       [Service]
    #       User=grafana-agent
    #       ExecStart={{ agent_binary_location }}/agent-{{ linux_architecture }} --config.file={{ agent_config_location }}/agent-config.yaml
    #       Restart=always

    #       [Install]
    #       WantedBy=multi-user.target

    # - name: Start Grafana Agent service
    #   systemd:
    #     daemon_reload: yes
    #     name: grafana-agent
    #     enabled: yes
    #     state: restarted